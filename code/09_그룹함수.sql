-- 그룹함수 SUM, AVG, MIN, MAX, COUNT

-- 전체 행수
SELECT COUNT(*) FROM EMPLOYEES;

-- 합계, 평균, 최소값, 최대값
SELECT SUM(SALARY), AVG(SALARY), MIN(SALARY), MAX(SALARY) 
FROM EMPLOYEES;

SELECT MIN(HIRE_DATE), MAX(HIRE_DATE)
FROM EMPLOYEES;

SELECT MIN(FIRST_NAME), MAX(FIRST_NAME)
FROM EMPLOYEES;

SELECT COUNT(*) FROM EMPLOYEES;
SELECT COUNT(COMMISSION_PCT) FROM EMPLOYEES; -- null이 아닌 행 수
SELECT COUNT(MANAGER_ID) FROM EMPLOYEES;

-- GROUP BY절
-- 부서 아이디가 50인 사람들의 급여 합
SELECT SUM(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 50;

SELECT JOB_ID FROM EMPLOYEES GROUP BY JOB_ID;

SELECT JOB_ID, AVG(SALARY) FROM EMPLOYEES GROUP BY JOB_ID; -- job_id별 급여평균

SELECT DEPARTMENT_ID, TRUNC(AVG(SALARY),2), SUM(SALARY), COUNT(SALARY) FROM EMPLOYEES GROUP BY DEPARTMENT_ID;

-- 주의할 점
-- 1. 그룹핑이 되지 않으면 그룹함수와 일반컬럼을 동시에 사용하지 못함
-- SELECT COUNT(*), SALARY FROM EMPLOYEES;

-- 2. group by절 사용 시 group절에 묶이지 않으면 다른 컬럼 조회를 할 수 없다
SELECT JOB_ID FROM EMPLOYEES GROUP BY DEPARTMENT_ID;
SELECT JOB_ID FROM EMPLOYEES GROUP BY JOB_ID;

-- 두 개 이상의 group by절
SELECT * FROM EMPLOYEES;
SELECT DEPARTMENT_ID, JOB_ID FROM EMPLOYEES GROUP BY DEPARTMENT_ID, JOB_ID ORDER BY DEPARTMENT_ID DESC;
SELECT DEPARTMENT_ID, JOB_ID, TRUNC(AVG(SALARY)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID, JOB_ID ORDER BY DEPARTMENT_ID DESC;


-- group by절의 조건 having (where절은 일반행에 대한 조건)
SELECT DEPARTMENT_ID, SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING SUM(SALARY) > 100000;

-- job_id별 개수
SELECT JOB_ID, COUNT(*)
FROM EMPLOYEES
GROUP BY JOB_ID
HAVING COUNT(*) >= 5
ORDER BY COUNT(*) DESC;

-- 부서아이디가 50이상인 행을 그룹핑 하고, 그룹 평균 중 5000 이상만 조회, 정렬
SELECT DEPARTMENT_ID, TRUNC(AVG(SALARY))
FROM EMPLOYEES
WHERE DEPARTMENT_ID >= 50
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) >= 5000
ORDER BY TRUNC(AVG(SALARY))DESC;

SELECT DEPARTMENT_ID, TRUNC(AVG(SALARY))
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING DEPARTMENT_ID >= 50 AND AVG(SALARY) >= 5000
ORDER BY TRUNC(AVG(SALARY))DESC;

-- 윈도우 함수 over()
-- 그룹화해도 예외적으로 총 행의 수를 붙여서 조회하는 구문
SELECT DEPARTMENT_ID, FIRST_NAME, COUNT(*) OVER() FROM EMPLOYEES;

SELECT * FROM EMPLOYEES;
--문제 1.
--사원 테이블에서 JOB_ID별 사원 수를 구하세요.
--사원 테이블에서 JOB_ID별 월급의 평균을 구하세요. 월급의 평균 순으로 내림차순 정렬하세요
SELECT JOB_ID, COUNT(*)
FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT JOB_ID, AVG(SALARY) AS 평균월급
FROM EMPLOYEES
GROUP BY JOB_ID
ORDER BY 평균월급 DESC;

--문제 2.
--사원 테이블에서 입사 년도 별 사원 수를 구하세요.
SELECT 20||SUBSTR(TO_CHAR(HIRE_DATE),1,2)||'년' AS 입사년도, COUNT(*) AS 사원_수
FROM EMPLOYEES
GROUP BY SUBSTR(TO_CHAR(HIRE_DATE),1,2)
ORDER BY SUBSTR(TO_CHAR(HIRE_DATE),1,2) ASC;

SELECT TO_CHAR(HIRE_DATE, 'YYYY')||'년' AS 입사년도, COUNT(*) AS 사원_수
FROM EMPLOYEES
GROUP BY TO_CHAR(HIRE_DATE, 'YYYY');

--문제 3.
--급여가 1000 이상인 사원들의 부서별 평균 급여를 출력하세요. 단 부서 평균 급여가 2000이상인 부서만 출력
SELECT TRUNC(AVG(SALARY),2)
FROM EMPLOYEES
WHERE SALARY >= 1000
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) >= 2000;

--문제 4.
--사원 테이블에서 commission_pct(커미션) 컬럼이 null이 아닌 사람들의
--department_id(부서별) salary(월급)의 평균, 합계, count를 구합니다.
--조건 1) 월급의 평균은 커미션을 적용시킨 월급입니다.
--조건 2) 평균은 소수 2째 자리에서 절삭 하세요
SELECT DEPARTMENT_ID, TRUNC(AVG(SALARY+SALARY*COMMISSION_PCT),2) AS 평균월급, SUM(SALARY), COUNT(*)
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
GROUP BY DEPARTMENT_ID; 

-- 복습 210413

-- GROUP BY
-- 부서별 평균급여
SELECT DEPARTMENT_ID, TRUNC(AVG(SALARY))
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY DEPARTMENT_ID ASC;

-- 부서 내 직무별 SALARY 합
SELECT DEPARTMENT_ID, JOB_ID, SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
ORDER BY DEPARTMENT_ID;

-- HAVING
-- 평균 급여가 6000 이상인 부서들의 정보만 출력
SELECT DEPARTMENT_ID, TRUNC(AVG(SALARY))
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) >= 6000
ORDER BY DEPARTMENT_ID;

-- 부서의 급여 평균이 8000을 초과하는 부서의 번호와 급여 평균
SELECT DEPARTMENT_ID, AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) > 8000;

-- 급여 평균이 8000을 초과하는 각 직무에 대해 직무와 급여 평균 출력
-- Sales 직무 담당 사원은 제외하고 급여 평균으로 정렬
SELECT JOB_ID, AVG(SALARY) AS PAYROLL
FROM EMPLOYEES
WHERE JOB_ID NOT LIKE 'SA%'
GROUP BY JOB_ID
HAVING AVG(SALARY) > 8000
ORDER BY PAYROLL;

-- 부서아이디가 50이상인 행을 그룹핑 하고, 급여 평균 중 5000 이상만 조회, 정렬
SELECT DEPARTMENT_ID, TRUNC(AVG(SALARY))
FROM EMPLOYEES
WHERE DEPARTMENT_ID >= 50
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) >= 5000
ORDER BY AVG(SALARY);
